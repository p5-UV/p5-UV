MODULE = UV             PACKAGE = UV::Loop      PREFIX = p5uv_loop_

PROTOTYPES: ENABLE

int p5uv_loop__close(SV *self, int is_default=0)
    PREINIT:
        uv_loop_t *loop;
        int res;
    CODE:
        RETVAL = 0;
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in _close");
        DEBUG_PRINT("Got the loop object. Is default? %i\n", is_default);

        /* drop out if we are without a loop */
        if (loop) {
            DEBUG_PRINT("Loop object is good\n");
            /* if the loop is alive, let's walk it and close everything */
            if (0 != uv_loop_alive(loop)) {
                DEBUG_PRINT("Loop is alive. We need to walk and close handles/requests.\n");
                uv_walk(loop, loop_walk_close_cb, NULL);
                DEBUG_PRINT("We need to run the loop so the handles/requests can close.\n");
                RETVAL = uv_run(loop, UV_RUN_DEFAULT);
                if (0 != RETVAL) {
                    DEBUG_PRINT("Loop run errored!\n");
                    croak("loop run error (%i): %s", RETVAL, uv_strerror(RETVAL));
                }
                DEBUG_PRINT("Loop run exited cleanly!\n");
            }
            DEBUG_PRINT("Loop about to close!\n");
            RETVAL = uv_loop_close(loop);
            if (0 == RETVAL) {
                DEBUG_PRINT("destroying the loop now!\n");
                if (loop->data) {
                    DEBUG_PRINT("It looks like we have loop data!\n");
                    loop->data = NULL;
                }
                DEBUG_PRINT("detaching struct from object!\n");
                res = xs_object_magic_detach_struct_rv(aTHX_ self, loop);
                if (0 != res) {
                    DEBUG_PRINT("detaching struct from object successful!\n");
                }
                if (0 == is_default) {
                    DEBUG_PRINT("freeing non-default loop's memory!\n");
                    Safefree(loop);
                }
            }
        }
    OUTPUT:
    RETVAL

void p5uv_loop__create(SV *self, int want_default)
    INIT:
        uv_loop_t *loop;
        int ret;
    CODE:
        DEBUG_PRINT("Requesting a default loop? %i\n", want_default);
        if(!xs_object_magic_has_struct_rv(aTHX_ self)) {
            if (want_default == 0) {
                Newx(loop, 1, uv_loop_t);
                if (NULL == loop) {
                    croak("Unable to allocate space for a new loop");
                }
                ret = uv_loop_init(loop);
                if (0 != ret) {
                    Safefree(loop);
                    croak("Error initializing loop (%i): %s", ret, uv_strerror(ret));
                }
            }
            else {
                DEBUG_PRINT("Getting the default loop!\n");
                loop = uv_default_loop();
                if (!loop) {
                    DEBUG_PRINT("Loop error when getting default loop!\n");
                    croak("Error getting a new default loop");
                }
            }
            DEBUG_PRINT("Attaching loop to object's magic!\n");
            xs_object_magic_attach_struct(aTHX_ SvRV(self), loop);
            DEBUG_PRINT("Saving a reference to the object in loop->data!\n");
            loop->data = SvREFCNT_inc(ST(0));
        }

void p5uv_loop__has_struct(SV *self)
    PPCODE:
        EXTEND(SP, 1);
        if(xs_object_magic_has_struct_rv(aTHX_ self))
            PUSHs(&PL_sv_yes);
        else
            PUSHs(&PL_sv_no);

void p5uv_loop__walk(SV *self)
    PREINIT:
        uv_loop_t *loop;
        SV **callback;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in _walk");
        callback = hv_fetchs((HV*)SvRV(self), "_on_walk", FALSE);
        if (callback && SvOK(*callback)) {
            uv_walk(loop, loop_walk_cb, *callback);
        }
        else {
            uv_walk(loop, loop_walk_cb, NULL);
        }

int p5uv_loop_alive(SV *self)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in alive");
        RETVAL = uv_loop_alive(loop);
    OUTPUT:
    RETVAL

int p5uv_loop_backend_fd(SV *self)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in backend_fd");
        RETVAL = uv_backend_fd(loop);
    OUTPUT:
    RETVAL

int p5uv_loop_backend_timeout(SV *self)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in backend_timeout");
        RETVAL = uv_backend_timeout(loop);
    OUTPUT:
    RETVAL

int p5uv_loop_configure(SV *self, uv_loop_option option, int value)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in configure");
        RETVAL = uv_loop_configure(loop, option, value);
    OUTPUT:
    RETVAL

uint64_t p5uv_loop_now(SV *self)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in now");
        RETVAL = uv_now(loop);
    OUTPUT:
    RETVAL

int p5uv_loop_run(SV *self, uv_run_mode mode=UV_RUN_DEFAULT)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in run");
        RETVAL = uv_run(loop, mode);
    OUTPUT:
    RETVAL

void p5uv_loop_stop(SV *self)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in stop");
        uv_stop(loop);

int p5uv_loop_update_time(SV *self)
    PREINIT:
        uv_loop_t *loop;
    CODE:
        loop = (uv_loop_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_loop_t in update_time");
        uv_update_time(loop);
