MODULE = UV             PACKAGE = UV::Handle      PREFIX = p5uv_handle_

PROTOTYPES: ENABLE

void p5uv_handle__destruct(SV *self, int closed)
    PREINIT:
        uv_handle_t *handle;
    CODE:
        handle = (uv_handle_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_handle_t in _destruct");
        if (closed) {
            p5uv_destroy_handle(aTHX_ handle);
            return;
        }
        if (!uv_is_closing(handle))
            uv_close(handle, handle_close_destroy_cb);

int p5uv_handle__active(SV *self)
    PREINIT:
        uv_handle_t *handle;
    CODE:
        handle = (uv_handle_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_handle_t in active");
        RETVAL = uv_is_active(handle);
    OUTPUT:
    RETVAL

void p5uv_handle__close(SV *self)
    PREINIT:
        uv_handle_t *handle;
    CODE:
        handle = (uv_handle_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_handle_t in _close");
        if (!handle) return;
        uv_close(handle, handle_close_cb);

void p5uv_handle__has_struct(SV *self)
    PPCODE:
        EXTEND(SP, 1);
        if(xs_object_magic_has_struct_rv(aTHX_ self))
            PUSHs(&PL_sv_yes);
        else
            PUSHs(&PL_sv_no);

int p5uv_handle_closing(SV *self)
    PREINIT:
        uv_handle_t *handle;
    CODE:
        handle = (uv_handle_t *)xs_object_magic_get_struct_rv_pretty(aTHX_ self, "uv_handle_t in closing");
        RETVAL = uv_is_closing(handle);
    OUTPUT:
    RETVAL
